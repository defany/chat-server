// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockservicedef

import (
	context "context"

	converter "github.com/defany/chat-server/app/internal/converter"
	mock "github.com/stretchr/testify/mock"
)

// MockChat is an autogenerated mock type for the Chat type
type MockChat struct {
	mock.Mock
}

type MockChat_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChat) EXPECT() *MockChat_Expecter {
	return &MockChat_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function with given fields: ctx, input
func (_m *MockChat) CreateChat(ctx context.Context, input converter.CreateChatInput) (converter.CreateChatOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 converter.CreateChatOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, converter.CreateChatInput) (converter.CreateChatOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, converter.CreateChatInput) converter.CreateChatOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(converter.CreateChatOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, converter.CreateChatInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type MockChat_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
//   - input converter.CreateChatInput
func (_e *MockChat_Expecter) CreateChat(ctx interface{}, input interface{}) *MockChat_CreateChat_Call {
	return &MockChat_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, input)}
}

func (_c *MockChat_CreateChat_Call) Run(run func(ctx context.Context, input converter.CreateChatInput)) *MockChat_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(converter.CreateChatInput))
	})
	return _c
}

func (_c *MockChat_CreateChat_Call) Return(_a0 converter.CreateChatOutput, _a1 error) *MockChat_CreateChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_CreateChat_Call) RunAndReturn(run func(context.Context, converter.CreateChatInput) (converter.CreateChatOutput, error)) *MockChat_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChat provides a mock function with given fields: ctx, input
func (_m *MockChat) DeleteChat(ctx context.Context, input converter.DeleteChatInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, converter.DeleteChatInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type MockChat_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - ctx context.Context
//   - input converter.DeleteChatInput
func (_e *MockChat_Expecter) DeleteChat(ctx interface{}, input interface{}) *MockChat_DeleteChat_Call {
	return &MockChat_DeleteChat_Call{Call: _e.mock.On("DeleteChat", ctx, input)}
}

func (_c *MockChat_DeleteChat_Call) Run(run func(ctx context.Context, input converter.DeleteChatInput)) *MockChat_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(converter.DeleteChatInput))
	})
	return _c
}

func (_c *MockChat_DeleteChat_Call) Return(_a0 error) *MockChat_DeleteChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_DeleteChat_Call) RunAndReturn(run func(context.Context, converter.DeleteChatInput) error) *MockChat_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, input
func (_m *MockChat) SendMessage(ctx context.Context, input converter.SendMessageInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, converter.SendMessageInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockChat_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - input converter.SendMessageInput
func (_e *MockChat_Expecter) SendMessage(ctx interface{}, input interface{}) *MockChat_SendMessage_Call {
	return &MockChat_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, input)}
}

func (_c *MockChat_SendMessage_Call) Run(run func(ctx context.Context, input converter.SendMessageInput)) *MockChat_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(converter.SendMessageInput))
	})
	return _c
}

func (_c *MockChat_SendMessage_Call) Return(_a0 error) *MockChat_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_SendMessage_Call) RunAndReturn(run func(context.Context, converter.SendMessageInput) error) *MockChat_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChat creates a new instance of MockChat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChat {
	mock := &MockChat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
